const { Core } = require("../core/index.ts");
const fs = require("fs");

module.exports = async ({ src, dest, item }) => {
    return new Promise(async (resolve, reject) => {
        try {
            const appPackage = new Core();
            const info = await appPackage.parseFile(src);
            let img;
            const defaultImg = () => {
                if(src.endsWith(".apk")) {
                    img = "/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAoHBwkHBgoJCAkLCwoMDxkQDw4ODx4WFxIZJCAmJSMgIyIoLTkwKCo2KyIjMkQyNjs9QEBAJjBGS0U+Sjk/QD3/2wBDAQsLCw8NDx0QEB09KSMpPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT3/wgARCAEAAQADAREAAhEBAxEB/8QAGgABAQEBAQEBAAAAAAAAAAAAAAQFAQMCB//EABQBAQAAAAAAAAAAAAAAAAAAAAD/2gAMAwEAAhADEAAAAP04AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEJwAAHS4AAAAAAAAAAAiJD1AAB5FZaAAAAAAAAAADLJwAAAUGoAAAAAAAAAADLJwAAAUGoAAAAAAAAAADLJwdOA6cBQagAAAAAAAAAAMsnB7mkDPJgUGoAAAAAAAAAADLJwXHodPkzgUGoAAAAAAAAAADLJwAAAUGoAAAAAAAAAADLJwAAAUmmAAAAAAAAAACckOAAA6VlAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB//EAC0QAAECAwUHBAMBAAAAAAAAAAECBAADURETNEBxEBQVMVKRkhIhMEFhYoCB/9oACAEBAAE/AP5smvVmZ6JAt/NYvnnQfGL550Hxi+edB8YvnnQfGL550Hxi+edB8YkvVCZ6J4A/NMw+cFIuk/Y94kz1SCSkC01jiE6iI4hOoiOITqIjiE6iI4hOoiOITqIidOM42qCQaiGE8rF0r6Htl32JOg+FhiRocu+xJ0HwsMSNDl32JOg2pHqUBaBbBBSSDzGxaChXpPPawxI0OXfYk6Da1bGeuiBzMITL5oAoTCwjmsJsH2Ydtro3iTag7WGJGhy77EnQbWzmTJkBJJt+/aEvG6RYn20EF43UCCbRpE13IXJUi3mKbWGJGhy77EnQfCwxI0OXf4k6D4WGJ/w5dy2E8Ag2KEbhO/XvG4TqDvG4TqDvG4TqDvG4TqDvG4TqDvG4TqDvG4Tv17w1bBuCSbVH+bP/xAAUEQEAAAAAAAAAAAAAAAAAAACg/9oACAECAQE/AAAf/8QAFBEBAAAAAAAAAAAAAAAAAAAAoP/aAAgBAwEBPwAAH//Z";
                } else if(src.endsWith(".ipa")) {
                    img = "/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAoHBwkHBgoJCAkLCwoMDxkQDw4ODx4WFxIZJCAmJSMgIyIoLTkwKCo2KyIjMkQyNjs9QEBAJjBGS0U+Sjk/QD3/2wBDAQsLCw8NDx0QEB09KSMpPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT3/wgARCAEAAQADAREAAhEBAxEB/8QAGgABAQEBAQEBAAAAAAAAAAAAAAQFAQIDB//EABQBAQAAAAAAAAAAAAAAAAAAAAD/2gAMAwEAAhADEAAAAP04AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEJwAAHS4AAAAAAAAAAAiJD6gAA+RWWgAAAAAAAAAAyycAAAFBqAAAAAAAAAAAyycAHo8gFBqAAAAAAAAAAAyycHT7lBCeQUGoAAAAAAAAAADLJwWl4MY8AoNQAAAAAAAAAAGWTgqNIGYTAoNQAAAAAAAAAAGWTgFZ0kOAoNQAAAAAAAAAAGWTgAAApNMAAAAAAAAAAE5IcAAB0rKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/xAAvEAABAgMFBwMEAwAAAAAAAAABAgMABFEQERI0cRMUFUBSkZIFIUEgMGGAMUKB/9oACAEBAAE/AP1sdnVqcwMC/wDNY2050HxjbTnQfGNtOdB8Y2050HxjbTnQfGNtOdB8YZnVBzA+APzTmJ6YKRsk/I94ZfUwSUhN5rHEHqIjiD1ERxB6iI4g9REcQeoiOIPURDzxeN6gkGoiQfKxslfA9uXnsydB9mQzI0PLz2ZOg+kNLLZXhOEfP0SGZGh5eezJ0FqUlagEi8mDIvBN+EaAw82680EIQEIFT7mFtqaVhWLjbIZkaHl57MnQW+mpBK1fIuFrzinXVKVbIZkaHl57MnQW+nuBLpQf7C2ebQh69P8AKvci2QzI0PLz2ZOgtBIN4jiK8F2AYqwn1FYBvQCYWsuLKlG8m2QzI0PLz+ZOg+zIZn/Dy8zLB8Ag3KEbg9RPeNweoO8bg9Qd43B6g7xuD1B3jcHqDvG4PUHeNweonvErLCXBJN6j+tn/xAAUEQEAAAAAAAAAAAAAAAAAAACg/9oACAECAQE/AAAf/8QAFBEBAAAAAAAAAAAAAAAAAAAAoP/aAAgBAwEBPwAAH//Z";
                } else {
                    img = "/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAoHBwkHBgoJCAkLCwoMDxkQDw4ODx4WFxIZJCAmJSMgIyIoLTkwKCo2KyIjMkQyNjs9QEBAJjBGS0U+Sjk/QD3/2wBDAQsLCw8NDx0QEB09KSMpPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT3/wgARCAEAAQADAREAAhEBAxEB/8QAGQABAQEBAQEAAAAAAAAAAAAAAAQFAQMH/8QAFAEBAAAAAAAAAAAAAAAAAAAAAP/aAAwDAQACEAMQAAAA+nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhOAAA6XAAAAAAAAAAAERIeoAAPIrLQAAAAAAAAAAZZOAAACg1AAAAAAAAAAAZZOAAACg1AAAAAAAAAAAZZOAAACg1AAAAAAAAAAAZZOAAACg1AAAAAAAAAAAZZOAAACg1AAAAAAAAAAAZZOAAACg1AAAAAAAAAAAZZOAAACk0wAAAAAAAAAATkhwAAHSsoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/8QAKxAAAQIDBgQHAQAAAAAAAAAAAQMEAAJRExQ0QHGRFTBSkhESMUFhYoCB/9oACAEBAAE/APzYq9nmU8iA8fmsWzzoPbFs86D2xbPOg9sWzzoPbFs86D2xbPOg9sIvZgp5FwB80zD5wZRZS+/rCK8yBJlEviaxxBakkcQWpJHEFqSRxBakkcQWpJHEFqSQssVj4zCUGohguZxZTe3pl32JOg5LDEjQ5d9iToOSwxI0OXfYk6DksMSNDl32JOg5LDEjQ5d9iToOSwxI0OXfYk6DksMSNDl3+JOg5LDE/wAOXctguKTCLgt9d4uC1BvFwWoN4uC1BvFwWoN4uC1BvFwWoN4uC313hq2DcVmP5s//xAAUEQEAAAAAAAAAAAAAAAAAAACg/9oACAECAQE/AAAf/8QAFBEBAAAAAAAAAAAAAAAAAAAAoP/aAAgBAwEBPwAAH//Z";
                }
            }
            if(info.icon) {
                img = info.icon;
            } else if(info.adaptiveIcons?.foreground) { // 安卓的adaptiveIcons
                const canvas = document.createElement("canvas");
                canvas.width = 324;
                canvas.height = 324;
                document.body.appendChild(canvas);
                const ctx = canvas.getContext("2d");
                //TODO 有些不规范的adaptiveIcons会出现图片宽高比不一致的情况，需要使宽或高是自适应的更有兼容性
                if(info.adaptiveIcons.background) {
                    const backgroundImg = new Image(canvas.width, canvas.height);
                    await new Promise(resolve => {
                        backgroundImg.onload = () => {
                            ctx.drawImage(backgroundImg, 0, 0, canvas.width, canvas.height);
                            resolve();
                        }
                        backgroundImg.src = `data:image/png;base64,${info.adaptiveIcons.background.toString("base64")}`;
                    });
                }
                const foregroundImg = new Image(canvas.width, canvas.height);
                await new Promise(resolve => {
                    foregroundImg.onload = () => {
                        ctx.drawImage(foregroundImg, 0, 0, canvas.width, canvas.height);
                        resolve();
                    }
                    foregroundImg.src = `data:image/png;base64,${info.adaptiveIcons.foreground.toString("base64")}`;
                });
                const blob = await new Promise(resolve => canvas.toBlob(resolve));
                if(blob) {
                    img = Buffer.from(await blob.arrayBuffer());
                } else {
                    defaultImg();
                }
            } else {
                defaultImg();
            }
            await fs.promises.writeFile(dest, img, typeof img === "string" ? "base64" : undefined);
            resolve(item);
        } catch (err) {
            reject(err);
        }
    });
}
